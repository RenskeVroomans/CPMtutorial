#ifndef GeneralHeader
#define GeneralHeader


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "dSFMT.h"
#include <gsl/gsl_blas.h>
#include <gsl/gsl_eigen.h>
#include <gsl/gsl_complex.h>
#include <gsl/gsl_matrix.h>
#include <cmath>
#include <list> 
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <iterator>
#include <algorithm>
#include <ext/numeric>
#include <boost/utility.hpp>

#define TRUE 1
#define FALSE 0

typedef struct POSITION{
  int xx;
  int yy;
}Position;

typedef struct FPOSITION{
  double xx;
  double yy;
}FPosition;

using namespace std;
using namespace __gnu_cxx;

//extern char dirname[2000];

/*
double labdavol=0.5;
//const double labdasurf=0.25;
double invT=0.333;
//const double yieldzero=8.;
//const double alpha=0.06;

int L=100;//grid length=maximum length of animal
int W=100;//grid width=maximum width of animal
int MaxNrCells=128;///256;
int firstvol=3200;//4480;

int seed=10;
*/
extern dsfmt_t dsfmt;
inline double uniform() { return dsfmt_genrand_close_open(&dsfmt); }

const int randlength=10000000;
extern double randarray[randlength];
extern int randloc;
extern int startloc[10];

//basic.cc : to create a field and cell struct and table with Jvalues.
void CreateField();
void AllocateCellArray();
void InitiateTargetVec(double ii, double jj);
void FindNeighbourhood(int order);
int FillJTable(int nrtypes,int nrentries,...);

//InOut
//functions to read parameters from a file
int GetValue(char *array,int start,void *variable,char type);
int ReadData(char *filename, char type,char *name,void *variable);
int ReadHeaderVars(char *filename);
int CopyPars(char *source,char *destination);
//BlobInfo
//functions to print info about cells in a blob
void PrintBlobInfo(FILE *file, int tijd);
void CleanBlobVariables(void);
void PrintCellPositions(FILE *file, int tijd);
void PrintCellEccentricities(FILE *file, int tijd);
void PrintAxes(FILE *file, int tijd, double vecx, double vecy);
void PrintVectorAngles(FILE *file, int tijd, int binnumber);
#endif


